/*
TITLE: ALGORITHMS             SUBTITLE:P2
AUTHOR 1:PAULA TAIBO SUAREZ   LOGIN:P.TAIBO
AUTHOR 2:SIYUAN HE            LOGIN:SIYUAN.HE
GROUP:6.1                     DATE:09/10/2023
*/

This practical was executed in a laptop with the next specifications:

OS: Linuxmint 6 faye
Kernel: x86_64 Linux 6.1.0-13-amd64
Window System: X11
Windows Manager: i3
CPU: 13th Gen Intel Core i7-1355U @ 12x 5GHz
RAM: 16GB 
Battery: 100% and plugged


And and was compiled with the next specifications:

Compiler: gcc (Debian 12.2.0-14) 12.2.0
Flags: -Wall -Wextra

The purpose of this practical is to implement the heap
creation and heap sort algorithms.

For the first test we run the heap creation algorithm with
a randomly initialized array to check if they work correctly.

Random array
This is the array:
[ 16  3 18 -11 -18 15  4 -8 11 20 -3 -5  3 18  6 10  1 -17 -2 -3]

This is the heap vector:
[ -18 -17 -5 -11 -3  3  4 -8 -2  3 -3 15 18 18  6 10  1 11 16 20]
sorted? 1
[ -17 -11 -5 -8 -3  3  4  1 -2  3 -3 15 18 18  6 10 20 11 16]
sorted? 1
---------------------------
This is the array:
[  6 -1  1  6 11 -11  2  8 -12 -18 -18 -15  5 -18 -6  7 17 20 -19  9]

This is the heap vector:
[ -19 -18 -18 -12 -18 -15 -6  7 -1  9  6 -11  5  2  1  8 17 20  6 11]
sorted? 1
[ -18 -18 -18 -12  6 -15 -6  7 -1  9 11 -11  5  2  1  8 17 20  6]
sorted? 1
---------------------------
This is the array:
[ 19 -2 -15  4 -3 13 -7 18 17 14 -4  4 -8 20 -8 -16 -10 14 13  0]

This is the heap vector:
[ -16 -10 -15 -2 -4 -8 -8  4 13  0 -3  4 13 20 -7 18 19 14 17 14]
sorted? 1
[ -15 -10 -8 -2 -4  4 -8  4 13  0 -3 14 13 20 -7 18 19 14 17]
sorted? 1
---------------------------
This is the array:
[ 16 15  5  0 17 -20 -11 15 20 -10  5 20 10 11  3 -14  5 19 -15  3]

This is the heap vector:
[ -20 -15 -11 -14 -10  5  3  5  0  3  5 20 10 11 16 15 15 19 20 17]
sorted? 1
[ -15 -14 -11  0 -10  5  3  5 17  3  5 20 10 11 16 15 15 19 20]
sorted? 1
---------------------------
This is the array:
[ 14  3 -11 -15  2  1 -11 14 -6 -19 -7 -9 17 20 11 15 20 -19 12 -20]

This is the heap vector:
[ -20 -19 -11 -15 -19 -9 -11 14 -6  2 -7  1 17 20 11 15 20 14 12  3]
sorted? 1
[ -19 -19 -11 -15 -7 -9 -11 14 -6  2  3  1 17 20 11 15 20 14 12]
sorted? 1
---------------------------

The test confirms that the algorithm work correctly. It is repeated
several times to reduce the probability of it having an anomalous result.
We now procede to determine its execution time using arrays of
size 500, 1000, 2000, 4000, 3000, 16000 and 32000 to demonstrate
empirically that for any given array the time complexity will be O(n),
as deduced in theory classes. We will do this by doing the calculations
with the estimated bound and a higher and lower bounds.

NOTES:
    - All the execution times are measured in microseconds
    - If the execution time is below 500 microseconds it is indicated
      with an asterisk (*). To get an accurate measurement, the operation
      will be repeated K times and the result will be the mean of those
      calculations. The constant K has to be a power of 10 for the
      measurement to be correct so we chose 1000.

Create heap:
   n	   t(n)	   t(n)/n^0.8	 t(n)/n		   t(n)/n^1.2
*  500	23.856000	0.165357	0.047712		0.013767		
* 1000	39.784000	0.158383	0.039784		0.009993		
* 2000	80.621000	0.184342	0.040310		0.008815		
* 4000	161.397000	0.211957	0.040349		0.007681		
* 8000	321.894000	0.242796	0.040237		0.006668		
*16000	669.939000	0.290228	0.041871		0.006041		
*32000	1295.899000	0.322442	0.040497		0.005086

Slightly underestimated bound: n^0.8
Tight bound: n
Slightly overestimated bound: n^1.2

Analysing the results we observe the hypothesized tight bound tends to the
constant 0.04 while the other two tend to zero and infinity.
This proves the complexity of the algorithm is indeed lineal.

We now procede to prove the correctness of the heap sort algorithm.
For this we will repeat the process of testing it with a random
array several times to make sure the results are accurate.

[ 13 -17 20 -20 -20  8 13 20 20 -1 -2 19 15 -20  9 -2 -17 20 -20  2]
[ -20 -20 -20 -20 -17 -17 -2 -2 -1  2  8  9 13 13 15 19 20 20 20 20]
ordered? 1

[ -18  6 19 -12 -14 -5  9 -18 -17 -7 -8 16 -2 -9 16 -2 19  9  0 20]
[ -18 -18 -17 -14 -12 -9 -8 -7 -5 -2 -2  0  6  9  9 16 16 19 19 20]
ordered? 1

[ -11 20 18 -14 -20  9  4 -15  8  6  9 12 -7  8 -20 -1 -16 11  3 -13]
[ -20 -20 -16 -15 -14 -13 -11 -7 -1  3  4  6  8  8  9  9 11 12 18 20]
ordered? 1

[ -15 15 -17  4 -13 -20 -17 -13 11  5 -13 -20  5 -14 -14  7 15 12 12  5]
[ -20 -20 -17 -17 -15 -14 -14 -13 -13 -13  4  5  5  5  7 11 12 12 15 15]
ordered? 1

[ -3  1 -4 10 -10 -2 -10 -6 -12 13  4 -4  9  9 20 16  9 -16 -18  0]
[ -18 -16 -12 -10 -10 -6 -4 -4 -3 -2  0  1  4  9  9  9 10 13 16 20]
ordered? 1

Since the algorithm works correctly we can now calculate its complexity.
Based on the theory, we can assume it is nlogn so we will choose n
and n^1.4 as the upper and lower bounds.

NOTES:
    - All the execution times are measured in microseconds
    - If the execution time is below 500 microseconds it is indicated
      with an asterisk (*). To get an accurate measurement, the operation
      will be repeated K times and the result will be the mean of those
      calculations. The constant K has to be a power of 10 for the
      measurement to be correct so we chose 1000.

Sort for ascending ordered array:
   n	   t(n)		t(n)/n^1	t(n)/n*logn	   t(n)/n^1.4
*  500	20.277000	0.040554	0.006526		0.003376		
* 1000	59.467000	0.059467	0.008609		0.003752		
* 2000	150.991000	0.075496	0.009932		0.003610		
* 4000	366.252000	0.091563	0.011040		0.003318		
  8000	708.000000	0.088500	0.009847		0.002431		
 16000	1485.000000	0.092813	0.009588		0.001932		
 32000	3027.000000	0.094594	0.009119		0.001492

Sort for descendig ordered array:
   n	   t(n)		t(n)/n^1   t(n)/n*logn	   t(n)/n^1.4
*  500	27.774000	0.055548	0.008938		0.004625		
* 1000	73.020000	0.073020	0.010571		0.004607		
* 2000	178.844000	0.089422	0.011765		0.004276		
* 4000	384.450000	0.096113	0.011588		0.003483		
  8000	811.000000	0.101375	0.011280		0.002784		
 16000	1724.000000	0.107750	0.011131		0.002243		
 32000	3615.000000	0.112969	0.010890		0.001782

Sort for random array:
   n	   t(n)		t(n)/n^1  t(n)/n*logn	   t(n)/n^1.4
*  500	55.857000	0.111714	0.017976		0.009301		
* 1000	119.815000	0.119815	0.017345		0.007560		
* 2000	258.384000	0.129192	0.016997		0.006178		
* 4000	555.415000	0.138854	0.016741		0.005032		
  8000	923.000000	0.115375	0.012838		0.003169		
 16000	1976.000000	0.123500	0.012758		0.002571		
 32000	4471.000000	0.139719	0.013469		0.002204		

Sort for random array with updated hypothesis:
   n	   t(n)	   t(n)/n^0.8	 t(n)/n		   t(n)/n^1.2
*  500	55.277000	0.383150	0.110554		0.031899		
* 1000	123.556000	0.491885	0.123556		0.031036		
* 2000	263.316000	0.602079	0.131658		0.028790		
* 4000	551.897000	0.724786	0.137974		0.026266		
  8000	923.000000	0.696193	0.115375		0.019120		
 16000	2184.000000	0.946143	0.136500		0.019693		
 32000	4244.000000	1.055979	0.132625		0.016657

The first measurement (for the asceding ordered array) is a bit anomalous
but the rest of the data is stable in the expected bound for the ascending
and descending starting orders, tending to the constant 0.009. However,
for the randomly sorted array the data is more stable for the linear complexity,
tending to 0.1. Even though the theoretical and empirical truths diverge, it
can be noted that nlogn can be rounded to n^1.2, thus, the difference between
linear and nlogn is sufficiently small for the computer to render the given
data in practice without refuting the theory. Because of this, we can say
that it is demonstrated that for any type of array the complexity of the
heap is nlogn as expected except for the random initialization which is still
very close.

Observations:

As always, the first measurement of each time test (when checking the heap
creation and heap sort) is a bit anomalous, but since the repetitions
are not made manually, the rest of the measurements remain constant and
accurate.

Heap algorithms. The constant is supposed to be close to 0.09
*  500  19.629000   0.039258    ->0.006317<-        0.003268
Heap sort. The constant is supposed to be close to 0.04
*  500  23.856000   0.165357    ->0.047712<-        0.013767

Conclusions:

After running all the tests and empirically analysing the time complexity
of the algorithms it is demonstrated that it coincides with the mathematical
theory, since the heap creation is linear and the heap sort has always
a complexity sufficiently close to nlogn for any type of array given,
regardless of its size or initial order, since we can say that an empirical
complexity of n^1 coexist with a theoretical complexity of n^1.2 without
disproving it.

