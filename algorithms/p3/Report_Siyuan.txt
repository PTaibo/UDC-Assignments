/*
TITLE: ALGORITHMS             SUBTITLE:P2
AUTHOR 1:PAULA TAIBO SUAREZ   LOGIN:P.TAIBO
AUTHOR 2:SIYUAN HE            LOGIN:SIYUAN.HE
GROUP:6.1                     DATE:09/10/2023
*/

This practical was executed in a laptop with the next specifications:

OS: Linux Mint 21.2 x86_64 
Kernel: 5.15.0-87-generic 
Window System: X11
Windows Manager: kWin
CPU: 11th Gen Intel i7-1195G7 (8) @ 4.800GHz 
RAM: 16GB 
Battery: 100% and plugged


And and was compiled with the next specifications:

Compiler: gcc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0
Flags: -Wall -Wextra -O2

The purpose of this practical is to implement a heap and
the heap sort algorithm.

For the first test we run the heap creation algorithm
and the minimum element removal algorithm with a random
initialized array to check if they work correctly.

Random array
This is the array:
[  8 -2 -13 18 -19  6 -6 -14 -4 -15 -7 14 12  5 12 -3 -15 -7  8 -13]

This is the heap vector:
[ -19 -15 -13 -14 -15  6 -6 -3 -7 -13 -7 14 12  5 12  8 18 -4  8 -2]
sorted? 1
[ -15 -15 -13 -14 -13  6 -6 -3 -7 -2 -7 14 12  5 12  8 18 -4  8]
sorted? 1
---------------------------
This is the array:
[ -17 -9 -8 -14 -5 -3 -11 -6 -3 -1 12 -14 17 20 -16 20  7 -2 -12 -18]

This is the heap vector:
[ -18 -17 -16 -14 -9 -14 -11 -6 -12 -5 12 -3 17 20 -8 20  7 -2 -3 -1]
sorted? 1
[ -17 -14 -16 -12 -9 -14 -11 -6 -3 -5 12 -3 17 20 -8 20  7 -2 -1]
sorted? 1
---------------------------
This is the array:
[  5  3 19 -4 -11 12 15 -6 -16  2  1 -13 15 15 -5 -10 -9  4  6  9]

This is the heap vector:
[ -16 -11 -13 -10  1 12 -5 -9 -4  2  5 19 15 15 15 -6  3  4  6  9]
sorted? 1
[ -13 -11 -5 -10  1 12  9 -9 -4  2  5 19 15 15 15 -6  3  4  6]
sorted? 1
---------------------------
This is the array:
[ -18 -3 15 -19 -2 -20 -18 -16 -2 -10 -11 -18 15 -11  1 -17 -20 -5 -3 -16]

This is the heap vector:
[ -20 -19 -20 -18 -16 -18 -18 -17 -5 -10 -11 15 15 -11  1 -3 -16 -2 -3 -2]
sorted? 1
[ -20 -19 -18 -18 -16 -2 -18 -17 -5 -10 -11 15 15 -11  1 -3 -16 -2 -3]
sorted? 1
---------------------------
This is the array:
[ 20 20 -7 14 15 10 -17 -15 -7 11 16 -3 -10 13  0  8 13  3 15 -9]

This is the heap vector:
[ -17 -15 -10 -7 -9 -3 -7  8  3 11 16 20 10 13  0 14 13 20 15 15]
sorted? 1
[ -15 -9 -10 -7 11 -3 -7  8  3 15 16 20 10 13  0 14 13 20 15]
sorted? 1
---------------------------

The test confirms that both algorithms work correctly. It is repeated
several times to reduce the possibility of it having an anomalous
result. We now procede to determine their execution times using arrays
of size 500, 1000, 2000, 4000, 3000, 16000 and 32000 to demonstrate
empirically that for any given array the time complexity will be O(n),
as deduced in theory classes.

NOTES:
    - All the execution times are measured in microseconds
    - If the execution time is below 500 microseconds it is indicated
      with an asterisk (*). To get an accurate measurement, the operation
      will be repeated K times and the result will be the mean of those
      calculations. The constant K has to be a power of 10 for the
      measurement to be correct so we chose 1000.



Create heap:
   n            t(n)          t(n)/n^0.8        t(n)/n                t(n)/n^1.2
*  500        15.172000        0.105164        0.030344                0.008755                
* 1000        29.986000        0.119376        0.029986                0.007532                
* 2000        61.521000        0.140669        0.030760                0.006726                
* 4000        119.507000       0.156944        0.029877                0.005687                
* 8000        239.750000       0.180837        0.029969                0.004967                
*16000        487.199000       0.211062        0.030450                0.004393                
*32000        973.643000       0.242259        0.030426                0.003821     

Slightly underestimated bound: n^0.8
Tight bound: n
Slightly overestimated bound: n^1.2

Analysing the results we observe the hypothesized tight bound tends to the
constant 0.029877 while the other two tend to zero and infinity.
This proves the complexity of the algorithm is indeed lineal.

We now procede to prove the correctness of the heap sort algorithm.
For this we will repeat the process of testing it with a random
array several times to make sure the results are accurate.


[ 14 -18  1 -16 -8 14 -8  7  8  9 -4 10 -5 13  5 -15 -5 19  8 -8]
[ -18 -16 -15 -8 -8 -8 -5 -5 -4  1  5  7  8  8  9 10 13 14 14 19]
ordered? 1

[ -11  6 -4 -13 -10 -5 -15 13 11 -13  5  4 -11 -15  8  3 20 20 -11  9]
[ -15 -15 -13 -13 -11 -11 -11 -10 -5 -4  3  4  5  6  8  9 11 13 20 20]
ordered? 1

[ 10  7 -2 -16  2 -17 -8 17 -17 20 -12 -8  7  7  0 19 -19  5 11 12]
[ -19 -17 -17 -16 -12 -8 -8 -2  0  2  5  7  7  7 10 11 12 17 19 20]
ordered? 1

[ 12 -3 -5 -18  5 -16  8  4 -16 17 -8 16  6 12 -18 -13 17 -6 -17 -20]
[ -20 -18 -18 -17 -16 -16 -13 -8 -6 -5 -3  4  5  6  8 12 12 16 17 17]
ordered? 1

[ -5 -6 -8 -19 -18 14 -19 -17  1 15 18 -6 -7 -6 -1 18 -1 -14  1  5]
[ -19 -19 -18 -17 -14 -8 -7 -6 -6 -6 -5 -1 -1  1  1  5 14 15 18 18]
ordered? 1

Since the algorithm works correctly we can now calculate its complexity.
Based on the theory, we can assume it is nlogn so we will choose n
and n^1.4 as the upper and lower bounds.

NOTES:
    - All the execution times are measured in microseconds
    - If the execution time is below 500 microseconds it is indicated
      with an asterisk (*). To get an accurate measurement, the operation
      will be repeated K times and the result will be the mean of those
      calculations. The constant K has to be a power of 10 for the
      measurement to be correct so we chose 1000.

Sort for ascending ordered array:
 n         t(n)         t(n)/n^1        t(n)/n*logn            t(n)/n^1.4
*  500  24.603000       0.049206        0.007918                0.004097
* 1000  62.132000       0.062132        0.008995                0.003920
* 2000  156.601000      0.078300        0.010301                0.003744
* 4000  357.932000      0.089483        0.010789                0.003243
 8000   736.000000      0.092000        0.010237                0.002527
16000   1548.000000     0.096750        0.009994                0.002014
32000   3165.000000     0.098906        0.009535                0.001560


Sort for descendig ordered array:
 n         t(n)         t(n)/n^1       t(n)/n*logn            t(n)/n^1.4
*  500  29.015000       0.058030        0.009338                0.004831
* 1000  74.330000       0.074330        0.010760                0.004690
* 2000  173.069000      0.086535        0.011385                0.004138
* 4000  369.820000      0.092455        0.011147                0.003350
 8000   832.000000      0.104000        0.011572                0.002856
16000   1692.000000     0.105750        0.010924                0.002201
32000   3393.000000     0.106031        0.010221                0.001673

Sort for random array:
 n         t(n)         t(n)/n^1       t(n)/n*logn             t(n)/n^1.4
*  500  52.603000       0.105206        0.016929                0.008759
* 1000  113.497000      0.113497        0.016430                0.007161
* 2000  245.017000      0.122508        0.016118                0.005858
* 4000  528.579000      0.132145        0.015932                0.004789
 8000   921.000000      0.115125        0.012810                0.003162
16000   2007.000000     0.125438        0.012958                0.002611
32000   4300.000000     0.134375        0.012954                0.002120

Sort for random array with updated hypothesis:
   n       t(n)        t(n)/n^0.8        t(n)/n                t(n)/n^1.2
*  500  52.938000       0.366937        0.105876                0.030549
* 1000  114.312000      0.455084        0.114312                0.028714
* 2000  246.514000      0.563660        0.123257                0.026953
* 4000  527.391000      0.692604        0.131848                0.025099
 8000   930.000000      0.701473        0.116250                0.019265
16000   1973.000000     0.854734        0.123313                0.017790
32000   4289.000000     1.067176        0.134031                0.016834

The first measurement (for the asceding ordered array) is a bit anomalous
but the rest of the data is stable in the expected bound for the ascending
and descending starting orders, tending to the constant 0.010237 and 0.011147, respectivly.
However,for the randomly sorted array the data is more stable for the linear complexity,
tending to 0.123257. Even though the theoretical and empirical truths diverge, it
can be noted that nlogn can be rounded to n^1.2, thus, the difference between
linear and nlogn is sufficiently small for the computer to render the given
data in practice without refuting the theory. Because of this, we can say
that it is demonstrated that for any type of array the complexity of the
heap is nlogn as expected except for the random initialization which is still
very close.

Observations:

During the test we observe that some individual cases when n equals to 32000 
doesn't enter the k loop it gives some anomalous values.

Create heap:
   n	      t(n)		  t(n)/n^0.8	 t(n)/n	  t(n)/n^1.2
32000	   565.000000	   0.140582	 ->0.017656<-  0.002218

Also the first measurement of the heap sort is a bit anomalous, 
but since the repetitions are not made manually, the rest of the 
measurements remain constant and accurate.
Sort for ascending ordered array:
 n         t(n)         t(n)/n^1        t(n)/n*logn            t(n)/n^1.4
*  500  24.603000       0.049206        0.007918                0.004097


Conclusions:

After running all the tests and empirically analysing the time complexity
of the algorithms it is demonstrated that it coincides with the mathematical
theory, since the heap creation is linear and the heap sort has always
a complexity sufficiently close to nlogn for any type of array given,
regardless of its size or initial order, since we can say that an empirical
complexity of n^1 coexist with a theoretical complexity of n^1.2 without
disproving it.