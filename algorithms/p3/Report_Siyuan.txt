/*
TITLE: ALGORITHMS             SUBTITLE:P2
AUTHOR 1:PAULA TAIBO SUAREZ   LOGIN:P.TAIBO
AUTHOR 2:SIYUAN HE            LOGIN:SIYUAN.HE
GROUP:6.1                     DATE:09/10/2023
*/

This practical was executed in a laptop with the next specifications:

OS: Linux Mint 21.2 x86_64 
Kernel: 5.15.0-87-generic 
Window System: X11
Windows Manager: kWin
CPU: 11th Gen Intel i7-1195G7 (8) @ 4.800GHz 
RAM: 16GB 
Battery: 100% and plugged


And and was compiled with the next specifications:

Compiler: gcc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0
Flags: -Wall -Wextra -O2

The purpose of this practical is to implement a heap and
the heap sort algorithm.

For the first test we run the heap creation algorithm
and the minimum element removal algorithm with a random
initialized array to check if they work correctly.

Random array
This is the array:
[  8 -2 -13 18 -19  6 -6 -14 -4 -15 -7 14 12  5 12 -3 -15 -7  8 -13]

This is the heap vector:
[ -19 -15 -13 -14 -15  6 -6 -3 -7 -13 -7 14 12  5 12  8 18 -4  8 -2]
sorted? 1
[ -15 -15 -13 -14 -13  6 -6 -3 -7 -2 -7 14 12  5 12  8 18 -4  8]
sorted? 1
---------------------------
This is the array:
[ -17 -9 -8 -14 -5 -3 -11 -6 -3 -1 12 -14 17 20 -16 20  7 -2 -12 -18]

This is the heap vector:
[ -18 -17 -16 -14 -9 -14 -11 -6 -12 -5 12 -3 17 20 -8 20  7 -2 -3 -1]
sorted? 1
[ -17 -14 -16 -12 -9 -14 -11 -6 -3 -5 12 -3 17 20 -8 20  7 -2 -1]
sorted? 1
---------------------------
This is the array:
[  5  3 19 -4 -11 12 15 -6 -16  2  1 -13 15 15 -5 -10 -9  4  6  9]

This is the heap vector:
[ -16 -11 -13 -10  1 12 -5 -9 -4  2  5 19 15 15 15 -6  3  4  6  9]
sorted? 1
[ -13 -11 -5 -10  1 12  9 -9 -4  2  5 19 15 15 15 -6  3  4  6]
sorted? 1
---------------------------
This is the array:
[ -18 -3 15 -19 -2 -20 -18 -16 -2 -10 -11 -18 15 -11  1 -17 -20 -5 -3 -16]

This is the heap vector:
[ -20 -19 -20 -18 -16 -18 -18 -17 -5 -10 -11 15 15 -11  1 -3 -16 -2 -3 -2]
sorted? 1
[ -20 -19 -18 -18 -16 -2 -18 -17 -5 -10 -11 15 15 -11  1 -3 -16 -2 -3]
sorted? 1
---------------------------
This is the array:
[ 20 20 -7 14 15 10 -17 -15 -7 11 16 -3 -10 13  0  8 13  3 15 -9]

This is the heap vector:
[ -17 -15 -10 -7 -9 -3 -7  8  3 11 16 20 10 13  0 14 13 20 15 15]
sorted? 1
[ -15 -9 -10 -7 11 -3 -7  8  3 15 16 20 10 13  0 14 13 20 15]
sorted? 1
---------------------------

The test confirms that both algorithms work correctly. It is repeated
several times to reduce the possibility of it having an anomalous
result. We now procede to determine their execution times using arrays
of size 500, 1000, 2000, 4000, 3000, 16000 and 32000 to demonstrate
empirically that for any given array the time complexity will be O(n),
as deduced in theory classes.

Create heap:
   n            t(n)          t(n)/n^0.8        t(n)/n                t(n)/n^1.2
*  500        15.172000        0.105164        0.030344                0.008755                
* 1000        29.986000        0.119376        0.029986                0.007532                
* 2000        61.521000        0.140669        0.030760                0.006726                
* 4000        119.507000       0.156944        0.029877                0.005687                
* 8000        239.750000       0.180837        0.029969                0.004967                
*16000        487.199000       0.211062        0.030450                0.004393                
*32000        973.643000       0.242259        0.030426                0.003821     

[ 14 -18  1 -16 -8 14 -8  7  8  9 -4 10 -5 13  5 -15 -5 19  8 -8]
[ -18 -16 -15 -8 -8 -8 -5 -5 -4  1  5  7  8  8  9 10 13 14 14 19]
ordered? 1

[ -11  6 -4 -13 -10 -5 -15 13 11 -13  5  4 -11 -15  8  3 20 20 -11  9]
[ -15 -15 -13 -13 -11 -11 -11 -10 -5 -4  3  4  5  6  8  9 11 13 20 20]
ordered? 1

[ 10  7 -2 -16  2 -17 -8 17 -17 20 -12 -8  7  7  0 19 -19  5 11 12]
[ -19 -17 -17 -16 -12 -8 -8 -2  0  2  5  7  7  7 10 11 12 17 19 20]
ordered? 1

[ 12 -3 -5 -18  5 -16  8  4 -16 17 -8 16  6 12 -18 -13 17 -6 -17 -20]
[ -20 -18 -18 -17 -16 -16 -13 -8 -6 -5 -3  4  5  6  8 12 12 16 17 17]
ordered? 1

[ -5 -6 -8 -19 -18 14 -19 -17  1 15 18 -6 -7 -6 -1 18 -1 -14  1  5]
[ -19 -19 -18 -17 -14 -8 -7 -6 -6 -6 -5 -1 -1  1  1  5 14 15 18 18]
ordered? 1


Sort for ascending ordered array:
 n             t(n)          t(n)/n^0.8      t(n)/n^1.1              t(n)/n^1.4
*  500       5.155000         0.035732        0.001659                0.000858                
* 1000       16.607000        0.066114        0.002404                0.001048                
* 2000       53.926000        0.123303        0.003547                0.001289                
* 4000       129.904000       0.170598        0.003916                0.001177                
* 8000       288.628000       0.217704        0.004014                0.000991                
16000        616.000000       0.266861        0.003977                0.000801                
32000        1279.000000      0.318237        0.003853                0.000630                

Sort for descendig ordered array:
 n              t(n)          t(n)/n^0.8      t(n)/n^1.1            t(n)/n^1.4
*  500        5.478000         0.037970        0.001763              0.000912                
* 1000        21.773000        0.086680        0.003152              0.001374                
* 2000        54.117000        0.123740        0.003560              0.001294                
* 4000        125.716000       0.165098        0.003789              0.001139                
* 8000        273.751000       0.206483        0.003808              0.000940                
16000         575.000000       0.249099        0.003712              0.000748                
32000         1240.000000      0.308533        0.003735              0.000611                

Sort for random array:
 n             t(n)           t(n)/n^0.8      t(n)/n^1.1             t(n)/n^1.4
*  500       31.147000         0.215894        0.010024               0.005186                
* 1000       66.406000         0.264367        0.009613               0.004190                
* 2000       140.691000        0.321694        0.009255               0.003364                
* 4000       297.838000        0.391140        0.008977               0.002698                
* 8000       626.166000        0.472300        0.008709               0.002150                
16000        933.000000        0.404190        0.006024               0.001214                
32000        2007.000000       0.499376        0.006046               0.000989     
















Observations:

During the test we observe that sometimes when n equals to 32000 it doesn't enter
the loop of k and it gives a value that is no close to the constant.

Create heap:
   n	      t(n)		  t(n)/n^0.8	 t(n)/n	  t(n)/n^1.2
*  500	29.206000	   0.202440	   0.058412		0.016854		
* 1000	46.414000	   0.184777	   0.046414		0.011659		
* 2000	87.342000	   0.199710	   0.043671		0.009550		
* 4000	171.090000	   0.224686	   0.042772		0.008142		
* 8000	346.089000	   0.261045	   0.043261		0.007169		
*16000	682.671000	   0.295744	   0.042667		0.006156		
32000	   565.000000	   0.140582	 ->0.017656<-  0.002218