/*                                                                                                                   
TITLE: ALGORITHMS             SUBTITLE:P4
AUTHOR 1:PAULA TAIBO SUAREZ   LOGIN:P.TAIBO
AUTHOR 2:SIYUAN HE            LOGIN:SIYUAN.HE
GROUP:6.1                     DATE:09/10/2023
*/

This practical was executed in a laptop with the next specifications:

OS: Linuxmint 6 faye
Kernel: x86_64 Linux 6.1.0-13-amd64
Window System: X11
Windows Manager: i3
CPU: 13th Gen Intel Core i7-1355U @ 12x 5GHz
RAM: 16GB
Battery: 100% and plugged

And and was compiled with the next specifications:

Compiler: gcc (Debian 12.2.0-14) 12.2.0
Flags: -Wall -Wextra -lm

Te purpose of this practical is to implement the dijkstra
algorithm and empirically check its complexity.

First we are going to test that the algorithm works correctly.
We try it out with two matrices for which we know the correct
answer to see if the results are as expected.

Trying disjkstra with:
    0 1 3 4 6
    1 0 2 5 5
    3 2 0 7 5
    4 5 7 0 3
    6 5 5 3 0
Distances are correct

Trying disjkstra with:
    0 1 3 6
    1 0 2 5
    3 2 0 3
    6 5 3 0
Distances are correct

The tests demonstrates the correctness of the algorithm.
We now procede to determine its execution time using
matrices of size 5, 10, 20, 40, 80, 160 and 320 to empirically
check the complexity of the algorithm. We will accomplish
this by doing the calculations with the estimated bound and
a higher and lower bounds.

NOTES:
    - All the execution times are measured in microseconds
    - If the execution time is below 500 microseconds it is indicated
      with an asterisk (*). To get an accurate measurement, the operation
      will be repeated K times and the result will be the mean of those
      calculations. The constant K has to be a power of 10 for the
      measurement to be correct so we chose 1000.

Dijkstra execution time:
     n	  t(n)		    t(n)/n^2	t(n)/2.7	   t(n)/n^3.2
*    5	2.753000	    0.110120	0.035693		0.015963		
*   10	17.242000	    0.172420	0.034402		0.010879		
*   20	74.187000	    0.185468	0.022780		0.005094		
*   40	488.774000   	0.305484	0.023096		0.003652		
    80	3340.000000	    0.521875	0.024289		0.002716		
   160	19998.000000	0.781172	0.022380		0.001769		
   320	139699.000000	1.364248	0.024060		0.001345

Slightly underestimated bound: n^2
Tight bound: 2.7
Slightly overestimated bound: n^3.2

Analysing the results we observe that the hypothesized tight bound
tends to the constant 0.02 while the other two tend to zero and
infinity. This proves the complexity of the algorithm is indeed 2.7.

Observations:
As always, the first couple of measurements are a bit different
because it is the start of the execution, but it soon stabilizes.

Conclusions:
The theory dictates that the dijkstra algorithm has a complexity of (n+m)logn,
which can be rounded to n^2. However, after testing our program with said
complexity, it became obvious that this value did not suit our code. By
method of trial and error we arrived at the conclusion that the complexity
in our case is O(2.7).

